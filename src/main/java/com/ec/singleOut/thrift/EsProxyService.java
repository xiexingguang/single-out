/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ec.singleOut.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-29")
public class EsProxyService {

    public interface Iface {

        public boolean deleteDocument(long corpId, long crmId) throws EsProxyException, TException;

        public boolean insertOrUpdate(long corpId, long crmId) throws EsProxyException, TException;

        public boolean batchDeleteDocuments(long corId, List<Long> crmIds) throws EsProxyException, TException;

        public boolean batchInsertOrUpdate(long corpId, List<Long> crmIds) throws EsProxyException, TException;

        public String select(long corpId, String index, String type, String queryString) throws EsProxyException, TException;

    }

    public interface AsyncIface {

        public void deleteDocument(long corpId, long crmId, AsyncMethodCallback resultHandler)
                        throws TException;

        public void insertOrUpdate(long corpId, long crmId, AsyncMethodCallback resultHandler)
                        throws TException;

        public void batchDeleteDocuments(long corId, List<Long> crmIds, AsyncMethodCallback resultHandler)
                        throws TException;

        public void batchInsertOrUpdate(long corpId, List<Long> crmIds, AsyncMethodCallback resultHandler)
                        throws TException;

        public void select(long corpId, String index, String type, String queryString, AsyncMethodCallback resultHandler)
                        throws TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            @Override
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            @Override
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        @Override
        public boolean deleteDocument(long corpId, long crmId) throws EsProxyException, TException {
            send_deleteDocument(corpId, crmId);
            return recv_deleteDocument();
        }

        public void send_deleteDocument(long corpId, long crmId) throws TException {
            deleteDocument_args args = new deleteDocument_args();
            args.setCorpId(corpId);
            args.setCrmId(crmId);
            sendBase("deleteDocument", args);
        }

        public boolean recv_deleteDocument() throws EsProxyException, TException {
            deleteDocument_result result = new deleteDocument_result();
            receiveBase(result, "deleteDocument");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                            "deleteDocument failed: unknown result");
        }

        @Override
        public boolean insertOrUpdate(long corpId, long crmId) throws EsProxyException, TException {
            send_insertOrUpdate(corpId, crmId);
            return recv_insertOrUpdate();
        }

        public void send_insertOrUpdate(long corpId, long crmId) throws TException {
            insertOrUpdate_args args = new insertOrUpdate_args();
            args.setCorpId(corpId);
            args.setCrmId(crmId);
            sendBase("insertOrUpdate", args);
        }

        public boolean recv_insertOrUpdate() throws EsProxyException, TException {
            insertOrUpdate_result result = new insertOrUpdate_result();
            receiveBase(result, "insertOrUpdate");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                            "insertOrUpdate failed: unknown result");
        }

        @Override
        public boolean batchDeleteDocuments(long corId, List<Long> crmIds) throws EsProxyException, TException {
            send_batchDeleteDocuments(corId, crmIds);
            return recv_batchDeleteDocuments();
        }

        public void send_batchDeleteDocuments(long corId, List<Long> crmIds) throws TException {
            batchDeleteDocuments_args args = new batchDeleteDocuments_args();
            args.setCorId(corId);
            args.setCrmIds(crmIds);
            sendBase("batchDeleteDocuments", args);
        }

        public boolean recv_batchDeleteDocuments() throws EsProxyException, TException {
            batchDeleteDocuments_result result = new batchDeleteDocuments_result();
            receiveBase(result, "batchDeleteDocuments");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                            "batchDeleteDocuments failed: unknown result");
        }

        @Override
        public boolean batchInsertOrUpdate(long corpId, List<Long> crmIds) throws EsProxyException, TException {
            send_batchInsertOrUpdate(corpId, crmIds);
            return recv_batchInsertOrUpdate();
        }

        public void send_batchInsertOrUpdate(long corpId, List<Long> crmIds) throws TException {
            batchInsertOrUpdate_args args = new batchInsertOrUpdate_args();
            args.setCorpId(corpId);
            args.setCrmIds(crmIds);
            sendBase("batchInsertOrUpdate", args);
        }

        public boolean recv_batchInsertOrUpdate() throws EsProxyException, TException {
            batchInsertOrUpdate_result result = new batchInsertOrUpdate_result();
            receiveBase(result, "batchInsertOrUpdate");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                            "batchInsertOrUpdate failed: unknown result");
        }

        @Override
        public String select(long corpId, String index, String type, String queryString) throws EsProxyException, TException {
            send_select(corpId, index, type, queryString);
            return recv_select();
        }

        public void send_select(long corpId, String index, String type, String queryString) throws TException {
            select_args args = new select_args();
            args.setCorpId(corpId);
            args.setIndex(index);
            args.setType(type);
            args.setQueryString(queryString);
            sendBase("select", args);
        }

        public String recv_select() throws EsProxyException, TException {
            select_result result = new select_result();
            receiveBase(result, "select");
            if (result.isSetSuccess()) {
                return result.success;
            }
            if (result.e != null) {
                throw result.e;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "select failed: unknown result");
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            @Override
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager,
                        org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        @Override
        public void deleteDocument(long corpId, long crmId, AsyncMethodCallback resultHandler)
                        throws TException {
            checkReady();
            deleteDocument_call method_call = new deleteDocument_call(corpId, crmId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class deleteDocument_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long corpId;
            private long crmId;

            public deleteDocument_call(long corpId, long crmId, AsyncMethodCallback resultHandler,
                            org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                            org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.corpId = corpId;
                this.crmId = crmId;
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteDocument", org.apache.thrift.protocol.TMessageType.CALL, 0));
                deleteDocument_args args = new deleteDocument_args();
                args.setCorpId(corpId);
                args.setCrmId(crmId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws EsProxyException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                                getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_deleteDocument();
            }
        }

        @Override
        public void insertOrUpdate(long corpId, long crmId, AsyncMethodCallback resultHandler)
                        throws TException {
            checkReady();
            insertOrUpdate_call method_call = new insertOrUpdate_call(corpId, crmId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class insertOrUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long corpId;
            private long crmId;

            public insertOrUpdate_call(long corpId, long crmId, AsyncMethodCallback resultHandler,
                            org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                            org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.corpId = corpId;
                this.crmId = crmId;
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertOrUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
                insertOrUpdate_args args = new insertOrUpdate_args();
                args.setCorpId(corpId);
                args.setCrmId(crmId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws EsProxyException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                                getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_insertOrUpdate();
            }
        }

        @Override
        public void batchDeleteDocuments(long corId, List<Long> crmIds, AsyncMethodCallback resultHandler)
                        throws TException {
            checkReady();
            batchDeleteDocuments_call method_call = new batchDeleteDocuments_call(corId, crmIds, resultHandler, this, ___protocolFactory,
                            ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchDeleteDocuments_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long corId;
            private List<Long> crmIds;

            public batchDeleteDocuments_call(long corId, List<Long> crmIds, AsyncMethodCallback resultHandler,
                            org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                            org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.corId = corId;
                this.crmIds = crmIds;
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchDeleteDocuments", org.apache.thrift.protocol.TMessageType.CALL,
                                0));
                batchDeleteDocuments_args args = new batchDeleteDocuments_args();
                args.setCorId(corId);
                args.setCrmIds(crmIds);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws EsProxyException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                                getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchDeleteDocuments();
            }
        }

        @Override
        public void batchInsertOrUpdate(long corpId, List<Long> crmIds, AsyncMethodCallback resultHandler)
                        throws TException {
            checkReady();
            batchInsertOrUpdate_call method_call = new batchInsertOrUpdate_call(corpId, crmIds, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class batchInsertOrUpdate_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long corpId;
            private List<Long> crmIds;

            public batchInsertOrUpdate_call(long corpId, List<Long> crmIds, AsyncMethodCallback resultHandler,
                            org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                            org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.corpId = corpId;
                this.crmIds = crmIds;
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchInsertOrUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
                batchInsertOrUpdate_args args = new batchInsertOrUpdate_args();
                args.setCorpId(corpId);
                args.setCrmIds(crmIds);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws EsProxyException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                                getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_batchInsertOrUpdate();
            }
        }

        @Override
        public void select(long corpId, String index, String type, String queryString, AsyncMethodCallback resultHandler)
                        throws TException {
            checkReady();
            select_call method_call = new select_call(corpId, index, type, queryString, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class select_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long corpId;
            private String index;
            private String type;
            private String queryString;

            public select_call(long corpId, String index, String type, String queryString, AsyncMethodCallback resultHandler,
                            org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                            org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.corpId = corpId;
                this.index = index;
                this.type = type;
                this.queryString = queryString;
            }

            @Override
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("select", org.apache.thrift.protocol.TMessageType.CALL, 0));
                select_args args = new select_args();
                args.setCorpId(corpId);
                args.setIndex(index);
                args.setType(type);
                args.setQueryString(queryString);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws EsProxyException, TException {
                if (getState() != State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                                getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_select();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
                        Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("deleteDocument", new deleteDocument());
            processMap.put("insertOrUpdate", new insertOrUpdate());
            processMap.put("batchDeleteDocuments", new batchDeleteDocuments());
            processMap.put("batchInsertOrUpdate", new batchInsertOrUpdate());
            processMap.put("select", new select());
            return processMap;
        }

        public static class deleteDocument<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteDocument_args> {
            public deleteDocument() {
                super("deleteDocument");
            }

            @Override
            public deleteDocument_args getEmptyArgsInstance() {
                return new deleteDocument_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public deleteDocument_result getResult(I iface, deleteDocument_args args) throws TException {
                deleteDocument_result result = new deleteDocument_result();
                try {
                    result.success = iface.deleteDocument(args.corpId, args.crmId);
                    result.setSuccessIsSet(true);
                } catch (EsProxyException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class insertOrUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertOrUpdate_args> {
            public insertOrUpdate() {
                super("insertOrUpdate");
            }

            @Override
            public insertOrUpdate_args getEmptyArgsInstance() {
                return new insertOrUpdate_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public insertOrUpdate_result getResult(I iface, insertOrUpdate_args args) throws TException {
                insertOrUpdate_result result = new insertOrUpdate_result();
                try {
                    result.success = iface.insertOrUpdate(args.corpId, args.crmId);
                    result.setSuccessIsSet(true);
                } catch (EsProxyException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class batchDeleteDocuments<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchDeleteDocuments_args> {
            public batchDeleteDocuments() {
                super("batchDeleteDocuments");
            }

            @Override
            public batchDeleteDocuments_args getEmptyArgsInstance() {
                return new batchDeleteDocuments_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public batchDeleteDocuments_result getResult(I iface, batchDeleteDocuments_args args) throws TException {
                batchDeleteDocuments_result result = new batchDeleteDocuments_result();
                try {
                    result.success = iface.batchDeleteDocuments(args.corId, args.crmIds);
                    result.setSuccessIsSet(true);
                } catch (EsProxyException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class batchInsertOrUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchInsertOrUpdate_args> {
            public batchInsertOrUpdate() {
                super("batchInsertOrUpdate");
            }

            @Override
            public batchInsertOrUpdate_args getEmptyArgsInstance() {
                return new batchInsertOrUpdate_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public batchInsertOrUpdate_result getResult(I iface, batchInsertOrUpdate_args args) throws TException {
                batchInsertOrUpdate_result result = new batchInsertOrUpdate_result();
                try {
                    result.success = iface.batchInsertOrUpdate(args.corpId, args.crmIds);
                    result.setSuccessIsSet(true);
                } catch (EsProxyException e) {
                    result.e = e;
                }
                return result;
            }
        }

        public static class select<I extends Iface> extends org.apache.thrift.ProcessFunction<I, select_args> {
            public select() {
                super("select");
            }

            @Override
            public select_args getEmptyArgsInstance() {
                return new select_args();
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public select_result getResult(I iface, select_args args) throws TException {
                select_result result = new select_result();
                try {
                    result.success = iface.select(args.corpId, args.index, args.type, args.queryString);
                } catch (EsProxyException e) {
                    result.e = e;
                }
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
                        Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("deleteDocument", new deleteDocument());
            processMap.put("insertOrUpdate", new insertOrUpdate());
            processMap.put("batchDeleteDocuments", new batchDeleteDocuments());
            processMap.put("batchInsertOrUpdate", new batchInsertOrUpdate());
            processMap.put("select", new select());
            return processMap;
        }

        public static class deleteDocument<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteDocument_args, Boolean> {
            public deleteDocument() {
                super("deleteDocument");
            }

            @Override
            public deleteDocument_args getEmptyArgsInstance() {
                return new deleteDocument_args();
            }

            @Override
            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    @Override
                    public void onComplete(Boolean o) {
                        deleteDocument_result result = new deleteDocument_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    @Override
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        deleteDocument_result result = new deleteDocument_result();
                        if (e instanceof EsProxyException) {
                            result.e = (EsProxyException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public void start(I iface, deleteDocument_args args, AsyncMethodCallback<Boolean> resultHandler)
                            throws TException {
                iface.deleteDocument(args.corpId, args.crmId, resultHandler);
            }
        }

        public static class insertOrUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertOrUpdate_args, Boolean> {
            public insertOrUpdate() {
                super("insertOrUpdate");
            }

            @Override
            public insertOrUpdate_args getEmptyArgsInstance() {
                return new insertOrUpdate_args();
            }

            @Override
            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    @Override
                    public void onComplete(Boolean o) {
                        insertOrUpdate_result result = new insertOrUpdate_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    @Override
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        insertOrUpdate_result result = new insertOrUpdate_result();
                        if (e instanceof EsProxyException) {
                            result.e = (EsProxyException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public void start(I iface, insertOrUpdate_args args, AsyncMethodCallback<Boolean> resultHandler)
                            throws TException {
                iface.insertOrUpdate(args.corpId, args.crmId, resultHandler);
            }
        }

        public static class batchDeleteDocuments<I extends AsyncIface> extends
                        org.apache.thrift.AsyncProcessFunction<I, batchDeleteDocuments_args, Boolean> {
            public batchDeleteDocuments() {
                super("batchDeleteDocuments");
            }

            @Override
            public batchDeleteDocuments_args getEmptyArgsInstance() {
                return new batchDeleteDocuments_args();
            }

            @Override
            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    @Override
                    public void onComplete(Boolean o) {
                        batchDeleteDocuments_result result = new batchDeleteDocuments_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    @Override
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        batchDeleteDocuments_result result = new batchDeleteDocuments_result();
                        if (e instanceof EsProxyException) {
                            result.e = (EsProxyException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public void start(I iface, batchDeleteDocuments_args args, AsyncMethodCallback<Boolean> resultHandler)
                            throws TException {
                iface.batchDeleteDocuments(args.corId, args.crmIds, resultHandler);
            }
        }

        public static class batchInsertOrUpdate<I extends AsyncIface> extends
                        org.apache.thrift.AsyncProcessFunction<I, batchInsertOrUpdate_args, Boolean> {
            public batchInsertOrUpdate() {
                super("batchInsertOrUpdate");
            }

            @Override
            public batchInsertOrUpdate_args getEmptyArgsInstance() {
                return new batchInsertOrUpdate_args();
            }

            @Override
            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    @Override
                    public void onComplete(Boolean o) {
                        batchInsertOrUpdate_result result = new batchInsertOrUpdate_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    @Override
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        batchInsertOrUpdate_result result = new batchInsertOrUpdate_result();
                        if (e instanceof EsProxyException) {
                            result.e = (EsProxyException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public void start(I iface, batchInsertOrUpdate_args args, AsyncMethodCallback<Boolean> resultHandler)
                            throws TException {
                iface.batchInsertOrUpdate(args.corpId, args.crmIds, resultHandler);
            }
        }

        public static class select<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, select_args, String> {
            public select() {
                super("select");
            }

            @Override
            public select_args getEmptyArgsInstance() {
                return new select_args();
            }

            @Override
            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    @Override
                    public void onComplete(String o) {
                        select_result result = new select_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    @Override
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        select_result result = new select_result();
                        if (e instanceof EsProxyException) {
                            result.e = (EsProxyException) e;
                            result.setEIsSet(true);
                            msg = result;
                        } else {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            @Override
            protected boolean isOneway() {
                return false;
            }

            @Override
            public void start(I iface, select_args args, AsyncMethodCallback<String> resultHandler) throws TException {
                iface.select(args.corpId, args.index, args.type, args.queryString, resultHandler);
            }
        }

    }

    public static class deleteDocument_args implements org.apache.thrift.TBase<deleteDocument_args, deleteDocument_args._Fields>,
                    java.io.Serializable, Cloneable, Comparable<deleteDocument_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteDocument_args");

        private static final org.apache.thrift.protocol.TField CORP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("corpId",
                        org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField CRM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("crmId",
                        org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new deleteDocument_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteDocument_argsTupleSchemeFactory());
        }

        public long corpId; // required
        public long crmId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CORP_ID((short) 1, "corpId"), CRM_ID((short) 2, "crmId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // CORP_ID
                    return CORP_ID;
                case 2: // CRM_ID
                    return CRM_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not
             * found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __CORPID_ISSET_ID = 0;
        private static final int __CRMID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                            _Fields.class);
            tmpMap.put(_Fields.CORP_ID, new org.apache.thrift.meta_data.FieldMetaData("corpId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.CRM_ID, new org.apache.thrift.meta_data.FieldMetaData("crmId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteDocument_args.class, metaDataMap);
        }

        public deleteDocument_args() {
        }

        public deleteDocument_args(long corpId, long crmId) {
            this();
            this.corpId = corpId;
            setCorpIdIsSet(true);
            this.crmId = crmId;
            setCrmIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteDocument_args(deleteDocument_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.corpId = other.corpId;
            this.crmId = other.crmId;
        }

        @Override
        public deleteDocument_args deepCopy() {
            return new deleteDocument_args(this);
        }

        @Override
        public void clear() {
            setCorpIdIsSet(false);
            this.corpId = 0;
            setCrmIdIsSet(false);
            this.crmId = 0;
        }

        public long getCorpId() {
            return this.corpId;
        }

        public deleteDocument_args setCorpId(long corpId) {
            this.corpId = corpId;
            setCorpIdIsSet(true);
            return this;
        }

        public void unsetCorpId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORPID_ISSET_ID);
        }

        /** Returns true if field corpId is set (has been assigned a value) and false otherwise */
        public boolean isSetCorpId() {
            return EncodingUtils.testBit(__isset_bitfield, __CORPID_ISSET_ID);
        }

        public void setCorpIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORPID_ISSET_ID, value);
        }

        public long getCrmId() {
            return this.crmId;
        }

        public deleteDocument_args setCrmId(long crmId) {
            this.crmId = crmId;
            setCrmIdIsSet(true);
            return this;
        }

        public void unsetCrmId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CRMID_ISSET_ID);
        }

        /** Returns true if field crmId is set (has been assigned a value) and false otherwise */
        public boolean isSetCrmId() {
            return EncodingUtils.testBit(__isset_bitfield, __CRMID_ISSET_ID);
        }

        public void setCrmIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CRMID_ISSET_ID, value);
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case CORP_ID:
                if (value == null) {
                    unsetCorpId();
                } else {
                    setCorpId((Long) value);
                }
                break;

            case CRM_ID:
                if (value == null) {
                    unsetCrmId();
                } else {
                    setCrmId((Long) value);
                }
                break;

            }
        }

        @Override
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case CORP_ID:
                return Long.valueOf(getCorpId());

            case CRM_ID:
                return Long.valueOf(getCrmId());

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case CORP_ID:
                return isSetCorpId();
            case CRM_ID:
                return isSetCrmId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteDocument_args)
                return this.equals((deleteDocument_args) that);
            return false;
        }

        public boolean equals(deleteDocument_args that) {
            if (that == null)
                return false;

            boolean this_present_corpId = true;
            boolean that_present_corpId = true;
            if (this_present_corpId || that_present_corpId) {
                if (!(this_present_corpId && that_present_corpId))
                    return false;
                if (this.corpId != that.corpId)
                    return false;
            }

            boolean this_present_crmId = true;
            boolean that_present_crmId = true;
            if (this_present_crmId || that_present_crmId) {
                if (!(this_present_crmId && that_present_crmId))
                    return false;
                if (this.crmId != that.crmId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_corpId = true;
            list.add(present_corpId);
            if (present_corpId)
                list.add(corpId);

            boolean present_crmId = true;
            list.add(present_crmId);
            if (present_crmId)
                list.add(crmId);

            return list.hashCode();
        }

        @Override
        public int compareTo(deleteDocument_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCorpId()).compareTo(other.isSetCorpId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCorpId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.corpId, other.corpId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetCrmId()).compareTo(other.isSetCrmId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCrmId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crmId, other.crmId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteDocument_args(");
            boolean first = true;

            sb.append("corpId:");
            sb.append(this.corpId);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("crmId:");
            sb.append(this.crmId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky,
                // and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteDocument_argsStandardSchemeFactory implements SchemeFactory {
            @Override
            public deleteDocument_argsStandardScheme getScheme() {
                return new deleteDocument_argsStandardScheme();
            }
        }

        private static class deleteDocument_argsStandardScheme extends StandardScheme<deleteDocument_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteDocument_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // CORP_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.corpId = iprot.readI64();
                            struct.setCorpIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // CRM_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.crmId = iprot.readI64();
                            struct.setCrmIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the
                // validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteDocument_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(CORP_ID_FIELD_DESC);
                oprot.writeI64(struct.corpId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(CRM_ID_FIELD_DESC);
                oprot.writeI64(struct.crmId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteDocument_argsTupleSchemeFactory implements SchemeFactory {
            @Override
            public deleteDocument_argsTupleScheme getScheme() {
                return new deleteDocument_argsTupleScheme();
            }
        }

        private static class deleteDocument_argsTupleScheme extends TupleScheme<deleteDocument_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteDocument_args struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetCorpId()) {
                    optionals.set(0);
                }
                if (struct.isSetCrmId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCorpId()) {
                    oprot.writeI64(struct.corpId);
                }
                if (struct.isSetCrmId()) {
                    oprot.writeI64(struct.crmId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteDocument_args struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.corpId = iprot.readI64();
                    struct.setCorpIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.crmId = iprot.readI64();
                    struct.setCrmIdIsSet(true);
                }
            }
        }

    }

    public static class deleteDocument_result implements org.apache.thrift.TBase<deleteDocument_result, deleteDocument_result._Fields>,
                    java.io.Serializable, Cloneable, Comparable<deleteDocument_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteDocument_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
                        org.apache.thrift.protocol.TType.BOOL, (short) 0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e",
                        org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new deleteDocument_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteDocument_resultTupleSchemeFactory());
        }

        public boolean success; // required
        public EsProxyException e; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), E((short) 1, "e");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // E
                    return E;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not
             * found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                            _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteDocument_result.class, metaDataMap);
        }

        public deleteDocument_result() {
        }

        public deleteDocument_result(boolean success, EsProxyException e) {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteDocument_result(deleteDocument_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetE()) {
                this.e = new EsProxyException(other.e);
            }
        }

        @Override
        public deleteDocument_result deepCopy() {
            return new deleteDocument_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
            this.e = null;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public deleteDocument_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public EsProxyException getE() {
            return this.e;
        }

        public deleteDocument_result setE(EsProxyException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((Boolean) value);
                }
                break;

            case E:
                if (value == null) {
                    unsetE();
                } else {
                    setE((EsProxyException) value);
                }
                break;

            }
        }

        @Override
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return Boolean.valueOf(isSuccess());

            case E:
                return getE();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case E:
                return isSetE();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof deleteDocument_result)
                return this.equals((deleteDocument_result) that);
            return false;
        }

        public boolean equals(deleteDocument_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_e = true && (isSetE());
            list.add(present_e);
            if (present_e)
                list.add(e);

            return list.hashCode();
        }

        @Override
        public int compareTo(deleteDocument_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("deleteDocument_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky,
                // and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteDocument_resultStandardSchemeFactory implements SchemeFactory {
            @Override
            public deleteDocument_resultStandardScheme getScheme() {
                return new deleteDocument_resultStandardScheme();
            }
        }

        private static class deleteDocument_resultStandardScheme extends StandardScheme<deleteDocument_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteDocument_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.success = iprot.readBool();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // E
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.e = new EsProxyException();
                            struct.e.read(iprot);
                            struct.setEIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the
                // validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteDocument_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteDocument_resultTupleSchemeFactory implements SchemeFactory {
            @Override
            public deleteDocument_resultTupleScheme getScheme() {
                return new deleteDocument_resultTupleScheme();
            }
        }

        private static class deleteDocument_resultTupleScheme extends TupleScheme<deleteDocument_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteDocument_result struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteDocument_result struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new EsProxyException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

    }

    public static class insertOrUpdate_args implements org.apache.thrift.TBase<insertOrUpdate_args, insertOrUpdate_args._Fields>,
                    java.io.Serializable, Cloneable, Comparable<insertOrUpdate_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertOrUpdate_args");

        private static final org.apache.thrift.protocol.TField CORP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("corpId",
                        org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField CRM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("crmId",
                        org.apache.thrift.protocol.TType.I64, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new insertOrUpdate_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new insertOrUpdate_argsTupleSchemeFactory());
        }

        public long corpId; // required
        public long crmId; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CORP_ID((short) 1, "corpId"), CRM_ID((short) 2, "crmId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // CORP_ID
                    return CORP_ID;
                case 2: // CRM_ID
                    return CRM_ID;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not
             * found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __CORPID_ISSET_ID = 0;
        private static final int __CRMID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                            _Fields.class);
            tmpMap.put(_Fields.CORP_ID, new org.apache.thrift.meta_data.FieldMetaData("corpId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.CRM_ID, new org.apache.thrift.meta_data.FieldMetaData("crmId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertOrUpdate_args.class, metaDataMap);
        }

        public insertOrUpdate_args() {
        }

        public insertOrUpdate_args(long corpId, long crmId) {
            this();
            this.corpId = corpId;
            setCorpIdIsSet(true);
            this.crmId = crmId;
            setCrmIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public insertOrUpdate_args(insertOrUpdate_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.corpId = other.corpId;
            this.crmId = other.crmId;
        }

        @Override
        public insertOrUpdate_args deepCopy() {
            return new insertOrUpdate_args(this);
        }

        @Override
        public void clear() {
            setCorpIdIsSet(false);
            this.corpId = 0;
            setCrmIdIsSet(false);
            this.crmId = 0;
        }

        public long getCorpId() {
            return this.corpId;
        }

        public insertOrUpdate_args setCorpId(long corpId) {
            this.corpId = corpId;
            setCorpIdIsSet(true);
            return this;
        }

        public void unsetCorpId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORPID_ISSET_ID);
        }

        /** Returns true if field corpId is set (has been assigned a value) and false otherwise */
        public boolean isSetCorpId() {
            return EncodingUtils.testBit(__isset_bitfield, __CORPID_ISSET_ID);
        }

        public void setCorpIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORPID_ISSET_ID, value);
        }

        public long getCrmId() {
            return this.crmId;
        }

        public insertOrUpdate_args setCrmId(long crmId) {
            this.crmId = crmId;
            setCrmIdIsSet(true);
            return this;
        }

        public void unsetCrmId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CRMID_ISSET_ID);
        }

        /** Returns true if field crmId is set (has been assigned a value) and false otherwise */
        public boolean isSetCrmId() {
            return EncodingUtils.testBit(__isset_bitfield, __CRMID_ISSET_ID);
        }

        public void setCrmIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CRMID_ISSET_ID, value);
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case CORP_ID:
                if (value == null) {
                    unsetCorpId();
                } else {
                    setCorpId((Long) value);
                }
                break;

            case CRM_ID:
                if (value == null) {
                    unsetCrmId();
                } else {
                    setCrmId((Long) value);
                }
                break;

            }
        }

        @Override
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case CORP_ID:
                return Long.valueOf(getCorpId());

            case CRM_ID:
                return Long.valueOf(getCrmId());

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case CORP_ID:
                return isSetCorpId();
            case CRM_ID:
                return isSetCrmId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof insertOrUpdate_args)
                return this.equals((insertOrUpdate_args) that);
            return false;
        }

        public boolean equals(insertOrUpdate_args that) {
            if (that == null)
                return false;

            boolean this_present_corpId = true;
            boolean that_present_corpId = true;
            if (this_present_corpId || that_present_corpId) {
                if (!(this_present_corpId && that_present_corpId))
                    return false;
                if (this.corpId != that.corpId)
                    return false;
            }

            boolean this_present_crmId = true;
            boolean that_present_crmId = true;
            if (this_present_crmId || that_present_crmId) {
                if (!(this_present_crmId && that_present_crmId))
                    return false;
                if (this.crmId != that.crmId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_corpId = true;
            list.add(present_corpId);
            if (present_corpId)
                list.add(corpId);

            boolean present_crmId = true;
            list.add(present_crmId);
            if (present_crmId)
                list.add(crmId);

            return list.hashCode();
        }

        @Override
        public int compareTo(insertOrUpdate_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCorpId()).compareTo(other.isSetCorpId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCorpId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.corpId, other.corpId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetCrmId()).compareTo(other.isSetCrmId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCrmId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crmId, other.crmId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("insertOrUpdate_args(");
            boolean first = true;

            sb.append("corpId:");
            sb.append(this.corpId);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("crmId:");
            sb.append(this.crmId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky,
                // and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class insertOrUpdate_argsStandardSchemeFactory implements SchemeFactory {
            @Override
            public insertOrUpdate_argsStandardScheme getScheme() {
                return new insertOrUpdate_argsStandardScheme();
            }
        }

        private static class insertOrUpdate_argsStandardScheme extends StandardScheme<insertOrUpdate_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, insertOrUpdate_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // CORP_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.corpId = iprot.readI64();
                            struct.setCorpIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // CRM_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.crmId = iprot.readI64();
                            struct.setCrmIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the
                // validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, insertOrUpdate_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(CORP_ID_FIELD_DESC);
                oprot.writeI64(struct.corpId);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(CRM_ID_FIELD_DESC);
                oprot.writeI64(struct.crmId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class insertOrUpdate_argsTupleSchemeFactory implements SchemeFactory {
            @Override
            public insertOrUpdate_argsTupleScheme getScheme() {
                return new insertOrUpdate_argsTupleScheme();
            }
        }

        private static class insertOrUpdate_argsTupleScheme extends TupleScheme<insertOrUpdate_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, insertOrUpdate_args struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetCorpId()) {
                    optionals.set(0);
                }
                if (struct.isSetCrmId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCorpId()) {
                    oprot.writeI64(struct.corpId);
                }
                if (struct.isSetCrmId()) {
                    oprot.writeI64(struct.crmId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, insertOrUpdate_args struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.corpId = iprot.readI64();
                    struct.setCorpIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.crmId = iprot.readI64();
                    struct.setCrmIdIsSet(true);
                }
            }
        }

    }

    public static class insertOrUpdate_result implements org.apache.thrift.TBase<insertOrUpdate_result, insertOrUpdate_result._Fields>,
                    java.io.Serializable, Cloneable, Comparable<insertOrUpdate_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertOrUpdate_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
                        org.apache.thrift.protocol.TType.BOOL, (short) 0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e",
                        org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new insertOrUpdate_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new insertOrUpdate_resultTupleSchemeFactory());
        }

        public boolean success; // required
        public EsProxyException e; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), E((short) 1, "e");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // E
                    return E;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not
             * found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                            _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertOrUpdate_result.class, metaDataMap);
        }

        public insertOrUpdate_result() {
        }

        public insertOrUpdate_result(boolean success, EsProxyException e) {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public insertOrUpdate_result(insertOrUpdate_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetE()) {
                this.e = new EsProxyException(other.e);
            }
        }

        @Override
        public insertOrUpdate_result deepCopy() {
            return new insertOrUpdate_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
            this.e = null;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public insertOrUpdate_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public EsProxyException getE() {
            return this.e;
        }

        public insertOrUpdate_result setE(EsProxyException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((Boolean) value);
                }
                break;

            case E:
                if (value == null) {
                    unsetE();
                } else {
                    setE((EsProxyException) value);
                }
                break;

            }
        }

        @Override
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return Boolean.valueOf(isSuccess());

            case E:
                return getE();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case E:
                return isSetE();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof insertOrUpdate_result)
                return this.equals((insertOrUpdate_result) that);
            return false;
        }

        public boolean equals(insertOrUpdate_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_e = true && (isSetE());
            list.add(present_e);
            if (present_e)
                list.add(e);

            return list.hashCode();
        }

        @Override
        public int compareTo(insertOrUpdate_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("insertOrUpdate_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky,
                // and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class insertOrUpdate_resultStandardSchemeFactory implements SchemeFactory {
            @Override
            public insertOrUpdate_resultStandardScheme getScheme() {
                return new insertOrUpdate_resultStandardScheme();
            }
        }

        private static class insertOrUpdate_resultStandardScheme extends StandardScheme<insertOrUpdate_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, insertOrUpdate_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.success = iprot.readBool();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // E
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.e = new EsProxyException();
                            struct.e.read(iprot);
                            struct.setEIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the
                // validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, insertOrUpdate_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class insertOrUpdate_resultTupleSchemeFactory implements SchemeFactory {
            @Override
            public insertOrUpdate_resultTupleScheme getScheme() {
                return new insertOrUpdate_resultTupleScheme();
            }
        }

        private static class insertOrUpdate_resultTupleScheme extends TupleScheme<insertOrUpdate_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, insertOrUpdate_result struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, insertOrUpdate_result struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new EsProxyException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

    }

    public static class batchDeleteDocuments_args implements org.apache.thrift.TBase<batchDeleteDocuments_args, batchDeleteDocuments_args._Fields>,
                    java.io.Serializable, Cloneable, Comparable<batchDeleteDocuments_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchDeleteDocuments_args");

        private static final org.apache.thrift.protocol.TField COR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("corId",
                        org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField CRM_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("crmIds",
                        org.apache.thrift.protocol.TType.LIST, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new batchDeleteDocuments_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new batchDeleteDocuments_argsTupleSchemeFactory());
        }

        public long corId; // required
        public List<Long> crmIds; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            COR_ID((short) 1, "corId"), CRM_IDS((short) 2, "crmIds");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // COR_ID
                    return COR_ID;
                case 2: // CRM_IDS
                    return CRM_IDS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not
             * found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __CORID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                            _Fields.class);
            tmpMap.put(_Fields.COR_ID, new org.apache.thrift.meta_data.FieldMetaData("corId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.CRM_IDS, new org.apache.thrift.meta_data.FieldMetaData("crmIds", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchDeleteDocuments_args.class, metaDataMap);
        }

        public batchDeleteDocuments_args() {
        }

        public batchDeleteDocuments_args(long corId, List<Long> crmIds) {
            this();
            this.corId = corId;
            setCorIdIsSet(true);
            this.crmIds = crmIds;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchDeleteDocuments_args(batchDeleteDocuments_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.corId = other.corId;
            if (other.isSetCrmIds()) {
                List<Long> __this__crmIds = new ArrayList<Long>(other.crmIds);
                this.crmIds = __this__crmIds;
            }
        }

        @Override
        public batchDeleteDocuments_args deepCopy() {
            return new batchDeleteDocuments_args(this);
        }

        @Override
        public void clear() {
            setCorIdIsSet(false);
            this.corId = 0;
            this.crmIds = null;
        }

        public long getCorId() {
            return this.corId;
        }

        public batchDeleteDocuments_args setCorId(long corId) {
            this.corId = corId;
            setCorIdIsSet(true);
            return this;
        }

        public void unsetCorId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORID_ISSET_ID);
        }

        /** Returns true if field corId is set (has been assigned a value) and false otherwise */
        public boolean isSetCorId() {
            return EncodingUtils.testBit(__isset_bitfield, __CORID_ISSET_ID);
        }

        public void setCorIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORID_ISSET_ID, value);
        }

        public int getCrmIdsSize() {
            return (this.crmIds == null) ? 0 : this.crmIds.size();
        }

        public java.util.Iterator<Long> getCrmIdsIterator() {
            return (this.crmIds == null) ? null : this.crmIds.iterator();
        }

        public void addToCrmIds(long elem) {
            if (this.crmIds == null) {
                this.crmIds = new ArrayList<Long>();
            }
            this.crmIds.add(elem);
        }

        public List<Long> getCrmIds() {
            return this.crmIds;
        }

        public batchDeleteDocuments_args setCrmIds(List<Long> crmIds) {
            this.crmIds = crmIds;
            return this;
        }

        public void unsetCrmIds() {
            this.crmIds = null;
        }

        /** Returns true if field crmIds is set (has been assigned a value) and false otherwise */
        public boolean isSetCrmIds() {
            return this.crmIds != null;
        }

        public void setCrmIdsIsSet(boolean value) {
            if (!value) {
                this.crmIds = null;
            }
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case COR_ID:
                if (value == null) {
                    unsetCorId();
                } else {
                    setCorId((Long) value);
                }
                break;

            case CRM_IDS:
                if (value == null) {
                    unsetCrmIds();
                } else {
                    setCrmIds((List<Long>) value);
                }
                break;

            }
        }

        @Override
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case COR_ID:
                return Long.valueOf(getCorId());

            case CRM_IDS:
                return getCrmIds();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case COR_ID:
                return isSetCorId();
            case CRM_IDS:
                return isSetCrmIds();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof batchDeleteDocuments_args)
                return this.equals((batchDeleteDocuments_args) that);
            return false;
        }

        public boolean equals(batchDeleteDocuments_args that) {
            if (that == null)
                return false;

            boolean this_present_corId = true;
            boolean that_present_corId = true;
            if (this_present_corId || that_present_corId) {
                if (!(this_present_corId && that_present_corId))
                    return false;
                if (this.corId != that.corId)
                    return false;
            }

            boolean this_present_crmIds = true && this.isSetCrmIds();
            boolean that_present_crmIds = true && that.isSetCrmIds();
            if (this_present_crmIds || that_present_crmIds) {
                if (!(this_present_crmIds && that_present_crmIds))
                    return false;
                if (!this.crmIds.equals(that.crmIds))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_corId = true;
            list.add(present_corId);
            if (present_corId)
                list.add(corId);

            boolean present_crmIds = true && (isSetCrmIds());
            list.add(present_crmIds);
            if (present_crmIds)
                list.add(crmIds);

            return list.hashCode();
        }

        @Override
        public int compareTo(batchDeleteDocuments_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCorId()).compareTo(other.isSetCorId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCorId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.corId, other.corId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetCrmIds()).compareTo(other.isSetCrmIds());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCrmIds()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crmIds, other.crmIds);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("batchDeleteDocuments_args(");
            boolean first = true;

            sb.append("corId:");
            sb.append(this.corId);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("crmIds:");
            if (this.crmIds == null) {
                sb.append("null");
            } else {
                sb.append(this.crmIds);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky,
                // and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchDeleteDocuments_argsStandardSchemeFactory implements SchemeFactory {
            @Override
            public batchDeleteDocuments_argsStandardScheme getScheme() {
                return new batchDeleteDocuments_argsStandardScheme();
            }
        }

        private static class batchDeleteDocuments_argsStandardScheme extends StandardScheme<batchDeleteDocuments_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, batchDeleteDocuments_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // COR_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.corId = iprot.readI64();
                            struct.setCorIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // CRM_IDS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.crmIds = new ArrayList<Long>(_list0.size);
                                long _elem1;
                                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                    _elem1 = iprot.readI64();
                                    struct.crmIds.add(_elem1);
                                }
                                iprot.readListEnd();
                            }
                            struct.setCrmIdsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the
                // validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, batchDeleteDocuments_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(COR_ID_FIELD_DESC);
                oprot.writeI64(struct.corId);
                oprot.writeFieldEnd();
                if (struct.crmIds != null) {
                    oprot.writeFieldBegin(CRM_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.crmIds.size()));
                        for (long _iter3 : struct.crmIds) {
                            oprot.writeI64(_iter3);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchDeleteDocuments_argsTupleSchemeFactory implements SchemeFactory {
            @Override
            public batchDeleteDocuments_argsTupleScheme getScheme() {
                return new batchDeleteDocuments_argsTupleScheme();
            }
        }

        private static class batchDeleteDocuments_argsTupleScheme extends TupleScheme<batchDeleteDocuments_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchDeleteDocuments_args struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetCorId()) {
                    optionals.set(0);
                }
                if (struct.isSetCrmIds()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCorId()) {
                    oprot.writeI64(struct.corId);
                }
                if (struct.isSetCrmIds()) {
                    {
                        oprot.writeI32(struct.crmIds.size());
                        for (long _iter4 : struct.crmIds) {
                            oprot.writeI64(_iter4);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchDeleteDocuments_args struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.corId = iprot.readI64();
                    struct.setCorIdIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,
                                        iprot.readI32());
                        struct.crmIds = new ArrayList<Long>(_list5.size);
                        long _elem6;
                        for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
                            _elem6 = iprot.readI64();
                            struct.crmIds.add(_elem6);
                        }
                    }
                    struct.setCrmIdsIsSet(true);
                }
            }
        }

    }

    public static class batchDeleteDocuments_result implements
                    org.apache.thrift.TBase<batchDeleteDocuments_result, batchDeleteDocuments_result._Fields>, java.io.Serializable, Cloneable,
                    Comparable<batchDeleteDocuments_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchDeleteDocuments_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
                        org.apache.thrift.protocol.TType.BOOL, (short) 0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e",
                        org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new batchDeleteDocuments_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new batchDeleteDocuments_resultTupleSchemeFactory());
        }

        public boolean success; // required
        public EsProxyException e; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), E((short) 1, "e");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // E
                    return E;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not
             * found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                            _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchDeleteDocuments_result.class, metaDataMap);
        }

        public batchDeleteDocuments_result() {
        }

        public batchDeleteDocuments_result(boolean success, EsProxyException e) {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchDeleteDocuments_result(batchDeleteDocuments_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetE()) {
                this.e = new EsProxyException(other.e);
            }
        }

        @Override
        public batchDeleteDocuments_result deepCopy() {
            return new batchDeleteDocuments_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
            this.e = null;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public batchDeleteDocuments_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public EsProxyException getE() {
            return this.e;
        }

        public batchDeleteDocuments_result setE(EsProxyException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((Boolean) value);
                }
                break;

            case E:
                if (value == null) {
                    unsetE();
                } else {
                    setE((EsProxyException) value);
                }
                break;

            }
        }

        @Override
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return Boolean.valueOf(isSuccess());

            case E:
                return getE();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case E:
                return isSetE();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof batchDeleteDocuments_result)
                return this.equals((batchDeleteDocuments_result) that);
            return false;
        }

        public boolean equals(batchDeleteDocuments_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_e = true && (isSetE());
            list.add(present_e);
            if (present_e)
                list.add(e);

            return list.hashCode();
        }

        @Override
        public int compareTo(batchDeleteDocuments_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("batchDeleteDocuments_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky,
                // and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchDeleteDocuments_resultStandardSchemeFactory implements SchemeFactory {
            @Override
            public batchDeleteDocuments_resultStandardScheme getScheme() {
                return new batchDeleteDocuments_resultStandardScheme();
            }
        }

        private static class batchDeleteDocuments_resultStandardScheme extends StandardScheme<batchDeleteDocuments_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, batchDeleteDocuments_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.success = iprot.readBool();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // E
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.e = new EsProxyException();
                            struct.e.read(iprot);
                            struct.setEIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the
                // validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, batchDeleteDocuments_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchDeleteDocuments_resultTupleSchemeFactory implements SchemeFactory {
            @Override
            public batchDeleteDocuments_resultTupleScheme getScheme() {
                return new batchDeleteDocuments_resultTupleScheme();
            }
        }

        private static class batchDeleteDocuments_resultTupleScheme extends TupleScheme<batchDeleteDocuments_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchDeleteDocuments_result struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchDeleteDocuments_result struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new EsProxyException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

    }

    public static class batchInsertOrUpdate_args implements org.apache.thrift.TBase<batchInsertOrUpdate_args, batchInsertOrUpdate_args._Fields>,
                    java.io.Serializable, Cloneable, Comparable<batchInsertOrUpdate_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchInsertOrUpdate_args");

        private static final org.apache.thrift.protocol.TField CORP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("corpId",
                        org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField CRM_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("crmIds",
                        org.apache.thrift.protocol.TType.LIST, (short) 2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new batchInsertOrUpdate_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new batchInsertOrUpdate_argsTupleSchemeFactory());
        }

        public long corpId; // required
        public List<Long> crmIds; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CORP_ID((short) 1, "corpId"), CRM_IDS((short) 2, "crmIds");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // CORP_ID
                    return CORP_ID;
                case 2: // CRM_IDS
                    return CRM_IDS;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not
             * found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __CORPID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                            _Fields.class);
            tmpMap.put(_Fields.CORP_ID, new org.apache.thrift.meta_data.FieldMetaData("corpId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.CRM_IDS, new org.apache.thrift.meta_data.FieldMetaData("crmIds", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchInsertOrUpdate_args.class, metaDataMap);
        }

        public batchInsertOrUpdate_args() {
        }

        public batchInsertOrUpdate_args(long corpId, List<Long> crmIds) {
            this();
            this.corpId = corpId;
            setCorpIdIsSet(true);
            this.crmIds = crmIds;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchInsertOrUpdate_args(batchInsertOrUpdate_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.corpId = other.corpId;
            if (other.isSetCrmIds()) {
                List<Long> __this__crmIds = new ArrayList<Long>(other.crmIds);
                this.crmIds = __this__crmIds;
            }
        }

        @Override
        public batchInsertOrUpdate_args deepCopy() {
            return new batchInsertOrUpdate_args(this);
        }

        @Override
        public void clear() {
            setCorpIdIsSet(false);
            this.corpId = 0;
            this.crmIds = null;
        }

        public long getCorpId() {
            return this.corpId;
        }

        public batchInsertOrUpdate_args setCorpId(long corpId) {
            this.corpId = corpId;
            setCorpIdIsSet(true);
            return this;
        }

        public void unsetCorpId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORPID_ISSET_ID);
        }

        /** Returns true if field corpId is set (has been assigned a value) and false otherwise */
        public boolean isSetCorpId() {
            return EncodingUtils.testBit(__isset_bitfield, __CORPID_ISSET_ID);
        }

        public void setCorpIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORPID_ISSET_ID, value);
        }

        public int getCrmIdsSize() {
            return (this.crmIds == null) ? 0 : this.crmIds.size();
        }

        public java.util.Iterator<Long> getCrmIdsIterator() {
            return (this.crmIds == null) ? null : this.crmIds.iterator();
        }

        public void addToCrmIds(long elem) {
            if (this.crmIds == null) {
                this.crmIds = new ArrayList<Long>();
            }
            this.crmIds.add(elem);
        }

        public List<Long> getCrmIds() {
            return this.crmIds;
        }

        public batchInsertOrUpdate_args setCrmIds(List<Long> crmIds) {
            this.crmIds = crmIds;
            return this;
        }

        public void unsetCrmIds() {
            this.crmIds = null;
        }

        /** Returns true if field crmIds is set (has been assigned a value) and false otherwise */
        public boolean isSetCrmIds() {
            return this.crmIds != null;
        }

        public void setCrmIdsIsSet(boolean value) {
            if (!value) {
                this.crmIds = null;
            }
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case CORP_ID:
                if (value == null) {
                    unsetCorpId();
                } else {
                    setCorpId((Long) value);
                }
                break;

            case CRM_IDS:
                if (value == null) {
                    unsetCrmIds();
                } else {
                    setCrmIds((List<Long>) value);
                }
                break;

            }
        }

        @Override
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case CORP_ID:
                return Long.valueOf(getCorpId());

            case CRM_IDS:
                return getCrmIds();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case CORP_ID:
                return isSetCorpId();
            case CRM_IDS:
                return isSetCrmIds();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof batchInsertOrUpdate_args)
                return this.equals((batchInsertOrUpdate_args) that);
            return false;
        }

        public boolean equals(batchInsertOrUpdate_args that) {
            if (that == null)
                return false;

            boolean this_present_corpId = true;
            boolean that_present_corpId = true;
            if (this_present_corpId || that_present_corpId) {
                if (!(this_present_corpId && that_present_corpId))
                    return false;
                if (this.corpId != that.corpId)
                    return false;
            }

            boolean this_present_crmIds = true && this.isSetCrmIds();
            boolean that_present_crmIds = true && that.isSetCrmIds();
            if (this_present_crmIds || that_present_crmIds) {
                if (!(this_present_crmIds && that_present_crmIds))
                    return false;
                if (!this.crmIds.equals(that.crmIds))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_corpId = true;
            list.add(present_corpId);
            if (present_corpId)
                list.add(corpId);

            boolean present_crmIds = true && (isSetCrmIds());
            list.add(present_crmIds);
            if (present_crmIds)
                list.add(crmIds);

            return list.hashCode();
        }

        @Override
        public int compareTo(batchInsertOrUpdate_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCorpId()).compareTo(other.isSetCorpId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCorpId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.corpId, other.corpId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetCrmIds()).compareTo(other.isSetCrmIds());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCrmIds()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crmIds, other.crmIds);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("batchInsertOrUpdate_args(");
            boolean first = true;

            sb.append("corpId:");
            sb.append(this.corpId);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("crmIds:");
            if (this.crmIds == null) {
                sb.append("null");
            } else {
                sb.append(this.crmIds);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky,
                // and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchInsertOrUpdate_argsStandardSchemeFactory implements SchemeFactory {
            @Override
            public batchInsertOrUpdate_argsStandardScheme getScheme() {
                return new batchInsertOrUpdate_argsStandardScheme();
            }
        }

        private static class batchInsertOrUpdate_argsStandardScheme extends StandardScheme<batchInsertOrUpdate_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, batchInsertOrUpdate_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // CORP_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.corpId = iprot.readI64();
                            struct.setCorpIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // CRM_IDS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            {
                                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                                struct.crmIds = new ArrayList<Long>(_list8.size);
                                long _elem9;
                                for (int _i10 = 0; _i10 < _list8.size; ++_i10) {
                                    _elem9 = iprot.readI64();
                                    struct.crmIds.add(_elem9);
                                }
                                iprot.readListEnd();
                            }
                            struct.setCrmIdsIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the
                // validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, batchInsertOrUpdate_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(CORP_ID_FIELD_DESC);
                oprot.writeI64(struct.corpId);
                oprot.writeFieldEnd();
                if (struct.crmIds != null) {
                    oprot.writeFieldBegin(CRM_IDS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.crmIds.size()));
                        for (long _iter11 : struct.crmIds) {
                            oprot.writeI64(_iter11);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchInsertOrUpdate_argsTupleSchemeFactory implements SchemeFactory {
            @Override
            public batchInsertOrUpdate_argsTupleScheme getScheme() {
                return new batchInsertOrUpdate_argsTupleScheme();
            }
        }

        private static class batchInsertOrUpdate_argsTupleScheme extends TupleScheme<batchInsertOrUpdate_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchInsertOrUpdate_args struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetCorpId()) {
                    optionals.set(0);
                }
                if (struct.isSetCrmIds()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetCorpId()) {
                    oprot.writeI64(struct.corpId);
                }
                if (struct.isSetCrmIds()) {
                    {
                        oprot.writeI32(struct.crmIds.size());
                        for (long _iter12 : struct.crmIds) {
                            oprot.writeI64(_iter12);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchInsertOrUpdate_args struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.corpId = iprot.readI64();
                    struct.setCorpIdIsSet(true);
                }
                if (incoming.get(1)) {
                    {
                        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64,
                                        iprot.readI32());
                        struct.crmIds = new ArrayList<Long>(_list13.size);
                        long _elem14;
                        for (int _i15 = 0; _i15 < _list13.size; ++_i15) {
                            _elem14 = iprot.readI64();
                            struct.crmIds.add(_elem14);
                        }
                    }
                    struct.setCrmIdsIsSet(true);
                }
            }
        }

    }

    public static class batchInsertOrUpdate_result implements
                    org.apache.thrift.TBase<batchInsertOrUpdate_result, batchInsertOrUpdate_result._Fields>, java.io.Serializable, Cloneable,
                    Comparable<batchInsertOrUpdate_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchInsertOrUpdate_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
                        org.apache.thrift.protocol.TType.BOOL, (short) 0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e",
                        org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new batchInsertOrUpdate_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new batchInsertOrUpdate_resultTupleSchemeFactory());
        }

        public boolean success; // required
        public EsProxyException e; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), E((short) 1, "e");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // E
                    return E;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not
             * found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                            _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchInsertOrUpdate_result.class, metaDataMap);
        }

        public batchInsertOrUpdate_result() {
        }

        public batchInsertOrUpdate_result(boolean success, EsProxyException e) {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public batchInsertOrUpdate_result(batchInsertOrUpdate_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetE()) {
                this.e = new EsProxyException(other.e);
            }
        }

        @Override
        public batchInsertOrUpdate_result deepCopy() {
            return new batchInsertOrUpdate_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
            this.e = null;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public batchInsertOrUpdate_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public EsProxyException getE() {
            return this.e;
        }

        public batchInsertOrUpdate_result setE(EsProxyException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((Boolean) value);
                }
                break;

            case E:
                if (value == null) {
                    unsetE();
                } else {
                    setE((EsProxyException) value);
                }
                break;

            }
        }

        @Override
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return Boolean.valueOf(isSuccess());

            case E:
                return getE();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case E:
                return isSetE();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof batchInsertOrUpdate_result)
                return this.equals((batchInsertOrUpdate_result) that);
            return false;
        }

        public boolean equals(batchInsertOrUpdate_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_e = true && (isSetE());
            list.add(present_e);
            if (present_e)
                list.add(e);

            return list.hashCode();
        }

        @Override
        public int compareTo(batchInsertOrUpdate_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("batchInsertOrUpdate_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky,
                // and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class batchInsertOrUpdate_resultStandardSchemeFactory implements SchemeFactory {
            @Override
            public batchInsertOrUpdate_resultStandardScheme getScheme() {
                return new batchInsertOrUpdate_resultStandardScheme();
            }
        }

        private static class batchInsertOrUpdate_resultStandardScheme extends StandardScheme<batchInsertOrUpdate_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, batchInsertOrUpdate_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.success = iprot.readBool();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // E
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.e = new EsProxyException();
                            struct.e.read(iprot);
                            struct.setEIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the
                // validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, batchInsertOrUpdate_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class batchInsertOrUpdate_resultTupleSchemeFactory implements SchemeFactory {
            @Override
            public batchInsertOrUpdate_resultTupleScheme getScheme() {
                return new batchInsertOrUpdate_resultTupleScheme();
            }
        }

        private static class batchInsertOrUpdate_resultTupleScheme extends TupleScheme<batchInsertOrUpdate_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, batchInsertOrUpdate_result struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, batchInsertOrUpdate_result struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new EsProxyException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

    }

    public static class select_args implements org.apache.thrift.TBase<select_args, select_args._Fields>, java.io.Serializable, Cloneable,
                    Comparable<select_args> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("select_args");

        private static final org.apache.thrift.protocol.TField CORP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("corpId",
                        org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index",
                        org.apache.thrift.protocol.TType.STRING, (short) 2);
        private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type",
                        org.apache.thrift.protocol.TType.STRING, (short) 3);
        private static final org.apache.thrift.protocol.TField QUERY_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("queryString",
                        org.apache.thrift.protocol.TType.STRING, (short) 4);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new select_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new select_argsTupleSchemeFactory());
        }

        public long corpId; // required
        public String index; // required
        public String type; // required
        public String queryString; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            CORP_ID((short) 1, "corpId"), INDEX((short) 2, "index"), TYPE((short) 3, "type"), QUERY_STRING((short) 4, "queryString");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 1: // CORP_ID
                    return CORP_ID;
                case 2: // INDEX
                    return INDEX;
                case 3: // TYPE
                    return TYPE;
                case 4: // QUERY_STRING
                    return QUERY_STRING;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not
             * found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __CORPID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                            _Fields.class);
            tmpMap.put(_Fields.CORP_ID, new org.apache.thrift.meta_data.FieldMetaData("corpId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.QUERY_STRING, new org.apache.thrift.meta_data.FieldMetaData("queryString",
                            org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
                                            org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(select_args.class, metaDataMap);
        }

        public select_args() {
        }

        public select_args(long corpId, String index, String type, String queryString) {
            this();
            this.corpId = corpId;
            setCorpIdIsSet(true);
            this.index = index;
            this.type = type;
            this.queryString = queryString;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public select_args(select_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.corpId = other.corpId;
            if (other.isSetIndex()) {
                this.index = other.index;
            }
            if (other.isSetType()) {
                this.type = other.type;
            }
            if (other.isSetQueryString()) {
                this.queryString = other.queryString;
            }
        }

        @Override
        public select_args deepCopy() {
            return new select_args(this);
        }

        @Override
        public void clear() {
            setCorpIdIsSet(false);
            this.corpId = 0;
            this.index = null;
            this.type = null;
            this.queryString = null;
        }

        public long getCorpId() {
            return this.corpId;
        }

        public select_args setCorpId(long corpId) {
            this.corpId = corpId;
            setCorpIdIsSet(true);
            return this;
        }

        public void unsetCorpId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORPID_ISSET_ID);
        }

        /** Returns true if field corpId is set (has been assigned a value) and false otherwise */
        public boolean isSetCorpId() {
            return EncodingUtils.testBit(__isset_bitfield, __CORPID_ISSET_ID);
        }

        public void setCorpIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORPID_ISSET_ID, value);
        }

        public String getIndex() {
            return this.index;
        }

        public select_args setIndex(String index) {
            this.index = index;
            return this;
        }

        public void unsetIndex() {
            this.index = null;
        }

        /** Returns true if field index is set (has been assigned a value) and false otherwise */
        public boolean isSetIndex() {
            return this.index != null;
        }

        public void setIndexIsSet(boolean value) {
            if (!value) {
                this.index = null;
            }
        }

        public String getType() {
            return this.type;
        }

        public select_args setType(String type) {
            this.type = type;
            return this;
        }

        public void unsetType() {
            this.type = null;
        }

        /** Returns true if field type is set (has been assigned a value) and false otherwise */
        public boolean isSetType() {
            return this.type != null;
        }

        public void setTypeIsSet(boolean value) {
            if (!value) {
                this.type = null;
            }
        }

        public String getQueryString() {
            return this.queryString;
        }

        public select_args setQueryString(String queryString) {
            this.queryString = queryString;
            return this;
        }

        public void unsetQueryString() {
            this.queryString = null;
        }

        /** Returns true if field queryString is set (has been assigned a value) and false otherwise */
        public boolean isSetQueryString() {
            return this.queryString != null;
        }

        public void setQueryStringIsSet(boolean value) {
            if (!value) {
                this.queryString = null;
            }
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case CORP_ID:
                if (value == null) {
                    unsetCorpId();
                } else {
                    setCorpId((Long) value);
                }
                break;

            case INDEX:
                if (value == null) {
                    unsetIndex();
                } else {
                    setIndex((String) value);
                }
                break;

            case TYPE:
                if (value == null) {
                    unsetType();
                } else {
                    setType((String) value);
                }
                break;

            case QUERY_STRING:
                if (value == null) {
                    unsetQueryString();
                } else {
                    setQueryString((String) value);
                }
                break;

            }
        }

        @Override
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case CORP_ID:
                return Long.valueOf(getCorpId());

            case INDEX:
                return getIndex();

            case TYPE:
                return getType();

            case QUERY_STRING:
                return getQueryString();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case CORP_ID:
                return isSetCorpId();
            case INDEX:
                return isSetIndex();
            case TYPE:
                return isSetType();
            case QUERY_STRING:
                return isSetQueryString();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof select_args)
                return this.equals((select_args) that);
            return false;
        }

        public boolean equals(select_args that) {
            if (that == null)
                return false;

            boolean this_present_corpId = true;
            boolean that_present_corpId = true;
            if (this_present_corpId || that_present_corpId) {
                if (!(this_present_corpId && that_present_corpId))
                    return false;
                if (this.corpId != that.corpId)
                    return false;
            }

            boolean this_present_index = true && this.isSetIndex();
            boolean that_present_index = true && that.isSetIndex();
            if (this_present_index || that_present_index) {
                if (!(this_present_index && that_present_index))
                    return false;
                if (!this.index.equals(that.index))
                    return false;
            }

            boolean this_present_type = true && this.isSetType();
            boolean that_present_type = true && that.isSetType();
            if (this_present_type || that_present_type) {
                if (!(this_present_type && that_present_type))
                    return false;
                if (!this.type.equals(that.type))
                    return false;
            }

            boolean this_present_queryString = true && this.isSetQueryString();
            boolean that_present_queryString = true && that.isSetQueryString();
            if (this_present_queryString || that_present_queryString) {
                if (!(this_present_queryString && that_present_queryString))
                    return false;
                if (!this.queryString.equals(that.queryString))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_corpId = true;
            list.add(present_corpId);
            if (present_corpId)
                list.add(corpId);

            boolean present_index = true && (isSetIndex());
            list.add(present_index);
            if (present_index)
                list.add(index);

            boolean present_type = true && (isSetType());
            list.add(present_type);
            if (present_type)
                list.add(type);

            boolean present_queryString = true && (isSetQueryString());
            list.add(present_queryString);
            if (present_queryString)
                list.add(queryString);

            return list.hashCode();
        }

        @Override
        public int compareTo(select_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetCorpId()).compareTo(other.isSetCorpId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCorpId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.corpId, other.corpId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetIndex()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetType()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetQueryString()).compareTo(other.isSetQueryString());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetQueryString()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryString, other.queryString);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("select_args(");
            boolean first = true;

            sb.append("corpId:");
            sb.append(this.corpId);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("index:");
            if (this.index == null) {
                sb.append("null");
            } else {
                sb.append(this.index);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("type:");
            if (this.type == null) {
                sb.append("null");
            } else {
                sb.append(this.type);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("queryString:");
            if (this.queryString == null) {
                sb.append("null");
            } else {
                sb.append(this.queryString);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky,
                // and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class select_argsStandardSchemeFactory implements SchemeFactory {
            @Override
            public select_argsStandardScheme getScheme() {
                return new select_argsStandardScheme();
            }
        }

        private static class select_argsStandardScheme extends StandardScheme<select_args> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, select_args struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 1: // CORP_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.corpId = iprot.readI64();
                            struct.setCorpIdIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // INDEX
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.index = iprot.readString();
                            struct.setIndexIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.type = iprot.readString();
                            struct.setTypeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // QUERY_STRING
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.queryString = iprot.readString();
                            struct.setQueryStringIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the
                // validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, select_args struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(CORP_ID_FIELD_DESC);
                oprot.writeI64(struct.corpId);
                oprot.writeFieldEnd();
                if (struct.index != null) {
                    oprot.writeFieldBegin(INDEX_FIELD_DESC);
                    oprot.writeString(struct.index);
                    oprot.writeFieldEnd();
                }
                if (struct.type != null) {
                    oprot.writeFieldBegin(TYPE_FIELD_DESC);
                    oprot.writeString(struct.type);
                    oprot.writeFieldEnd();
                }
                if (struct.queryString != null) {
                    oprot.writeFieldBegin(QUERY_STRING_FIELD_DESC);
                    oprot.writeString(struct.queryString);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class select_argsTupleSchemeFactory implements SchemeFactory {
            @Override
            public select_argsTupleScheme getScheme() {
                return new select_argsTupleScheme();
            }
        }

        private static class select_argsTupleScheme extends TupleScheme<select_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, select_args struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetCorpId()) {
                    optionals.set(0);
                }
                if (struct.isSetIndex()) {
                    optionals.set(1);
                }
                if (struct.isSetType()) {
                    optionals.set(2);
                }
                if (struct.isSetQueryString()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetCorpId()) {
                    oprot.writeI64(struct.corpId);
                }
                if (struct.isSetIndex()) {
                    oprot.writeString(struct.index);
                }
                if (struct.isSetType()) {
                    oprot.writeString(struct.type);
                }
                if (struct.isSetQueryString()) {
                    oprot.writeString(struct.queryString);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, select_args struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.corpId = iprot.readI64();
                    struct.setCorpIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.index = iprot.readString();
                    struct.setIndexIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.type = iprot.readString();
                    struct.setTypeIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.queryString = iprot.readString();
                    struct.setQueryStringIsSet(true);
                }
            }
        }

    }

    public static class select_result implements org.apache.thrift.TBase<select_result, select_result._Fields>, java.io.Serializable, Cloneable,
                    Comparable<select_result> {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("select_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success",
                        org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e",
                        org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new select_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new select_resultTupleSchemeFactory());
        }

        public String success; // required
        public EsProxyException e; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success"), E((short) 1, "e");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                case 0: // SUCCESS
                    return SUCCESS;
                case 1: // E
                    return E;
                default:
                    return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not
             * found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            @Override
            public short getThriftFieldId() {
                return _thriftId;
            }

            @Override
            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                            _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(select_result.class, metaDataMap);
        }

        public select_result() {
        }

        public select_result(String success, EsProxyException e) {
            this();
            this.success = success;
            this.e = e;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public select_result(select_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
            if (other.isSetE()) {
                this.e = new EsProxyException(other.e);
            }
        }

        @Override
        public select_result deepCopy() {
            return new select_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
            this.e = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public select_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public EsProxyException getE() {
            return this.e;
        }

        public select_result setE(EsProxyException e) {
            this.e = e;
            return this;
        }

        public void unsetE() {
            this.e = null;
        }

        /** Returns true if field e is set (has been assigned a value) and false otherwise */
        public boolean isSetE() {
            return this.e != null;
        }

        public void setEIsSet(boolean value) {
            if (!value) {
                this.e = null;
            }
        }

        @Override
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            case SUCCESS:
                if (value == null) {
                    unsetSuccess();
                } else {
                    setSuccess((String) value);
                }
                break;

            case E:
                if (value == null) {
                    unsetE();
                } else {
                    setE((EsProxyException) value);
                }
                break;

            }
        }

        @Override
        public Object getFieldValue(_Fields field) {
            switch (field) {
            case SUCCESS:
                return getSuccess();

            case E:
                return getE();

            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        @Override
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            case SUCCESS:
                return isSetSuccess();
            case E:
                return isSetE();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof select_result)
                return this.equals((select_result) that);
            return false;
        }

        public boolean equals(select_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_e = true && this.isSetE();
            boolean that_present_e = true && that.isSetE();
            if (this_present_e || that_present_e) {
                if (!(this_present_e && that_present_e))
                    return false;
                if (!this.e.equals(that.e))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_e = true && (isSetE());
            list.add(present_e);
            if (present_e)
                list.add(e);

            return list.hashCode();
        }

        @Override
        public int compareTo(select_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetE()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        @Override
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        @Override
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("select_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("e:");
            if (this.e == null) {
                sb.append("null");
            } else {
                sb.append(this.e);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class select_resultStandardSchemeFactory implements SchemeFactory {
            @Override
            public select_resultStandardScheme getScheme() {
                return new select_resultStandardScheme();
            }
        }

        private static class select_resultStandardScheme extends StandardScheme<select_result> {

            @Override
            public void read(org.apache.thrift.protocol.TProtocol iprot, select_result struct) throws TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                    case 0: // SUCCESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.success = iprot.readString();
                            struct.setSuccessIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 1: // E
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                            struct.e = new EsProxyException();
                            struct.e.read(iprot);
                            struct.setEIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the
                // validate method
                struct.validate();
            }

            @Override
            public void write(org.apache.thrift.protocol.TProtocol oprot, select_result struct) throws TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.e != null) {
                    oprot.writeFieldBegin(E_FIELD_DESC);
                    struct.e.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class select_resultTupleSchemeFactory implements SchemeFactory {
            @Override
            public select_resultTupleScheme getScheme() {
                return new select_resultTupleScheme();
            }
        }

        private static class select_resultTupleScheme extends TupleScheme<select_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, select_result struct) throws TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                if (struct.isSetE()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetE()) {
                    struct.e.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, select_result struct) throws TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.e = new EsProxyException();
                    struct.e.read(iprot);
                    struct.setEIsSet(true);
                }
            }
        }

    }

}
